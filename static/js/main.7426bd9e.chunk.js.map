{"version":3,"sources":["components/containers/CardList.tsx","components/navigation/Navigation.tsx","components/containers/Video.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["cardData","title","path","Card","videoData","framingData","encryptionData","to","className","generateVideoCardData","generateFramingCardData","generateEncryptionCardData","CardList","map","card","key","data","ping","bitrate","protocol","protocolVersion","errorsDetected","errorsCorrected","isEnabled","type","Navigation","menuItems","item","link","icon","Video","id","App","useState","setVideoData","setFramingData","setEncryptionData","useEffect","axios","get","then","res","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7426bd9e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { IEncryptionData, IFramingData, IVideoData } from '../../types/api/data';\n\nconst transition = { duration: 0.5, ease: [0.43, 0.13, 0.23, 0.96] };\n\nconst thumbnailVariants = {\n\tinitial: { scale: 0.9, opacity: 0 },\n\tenter: { scale: 1, opacity: 1, transition },\n\texit: {\n\t\tscale: 0.5,\n\t\topacity: 0,\n\t\ttransition: { duration: 1.5 }\n\t}\n};\n\ntype data = {\n\ttitle: string;\n\tpath: string;\n};\n\nconst cardData: data[] = [\n\t{ title: 'Video', path: 'video' },\n\t{ title: 'Framing', path: 'framing' },\n\t{ title: 'Encryption', path: 'encryption' }\n];\n\ntype ICardProps = {\n\ttitle: string;\n\tpath: string;\n\tvideoData?: IVideoData;\n\tframingData?: IFramingData;\n\tencryptionData?: IEncryptionData;\n};\n\nconst Card: React.FC<ICardProps> = ({ title, path, videoData, framingData, encryptionData }) => (\n\t<Link to={path}>\n\t\t<div className='rounded-3xl border border-gray-100 text-center h-32 my-8'>\n\t\t\t<h2 className='font-medium text-lg'>{title}</h2>\n\t\t\t{path === 'video' && generateVideoCardData(videoData)}\n\t\t\t{path === 'framing' && generateFramingCardData(framingData)}\n\t\t\t{path === 'encryption' && generateEncryptionCardData(encryptionData)}\n\t\t</div>\n\t</Link>\n);\n\ntype ICardListProps = {\n\tvideoData?: IVideoData;\n\tframingData?: IFramingData;\n\tencryptionData?: IEncryptionData;\n};\nconst CardList: React.FC<ICardListProps> = ({ videoData, framingData, encryptionData }) => {\n\treturn (\n\t\t<>\n\t\t\t<div className='p-8'>\n\t\t\t\t{cardData.map((card, key) => (\n\t\t\t\t\t<Card title={card.title} path={card.path} key={key} videoData={videoData} framingData={framingData} encryptionData={encryptionData} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n};\nexport default CardList;\n\nconst generateVideoCardData = (data: IVideoData | undefined) => {\n\treturn (\n\t\t<div>\n\t\t\t<p>Ping: {data?.ping}</p>\n\t\t\t<p>Bitrate: {data?.bitrate}</p>\n\t\t\t<p>Proctol: {data?.protocol}</p>\n\t\t\t<p>Protocol Version: {data?.protocolVersion}</p>\n\t\t</div>\n\t);\n};\n\nconst generateFramingCardData = (data: IFramingData | undefined) => {\n\treturn (\n\t\t<div>\n\t\t\t<p>Errors detected {data?.errorsDetected}</p>\n\t\t\t<p>Errors corrected {data?.errorsCorrected}</p>\n\t\t</div>\n\t);\n};\n\nconst generateEncryptionCardData = (data: IEncryptionData | undefined) => {\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tEncryption: <span className={`${data?.isEnabled ? 'text-green-800' : 'text-red-800'}`}>{data?.isEnabled ? 'enabled' : 'disabled'}</span>\n\t\t\t</p>\n\t\t\t<p>Type {data?.type}</p>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport { IMenuItem } from '../../types/MenuItems';\nimport { Link } from 'react-router-dom';\n\ntype IProps = { menuItems: IMenuItem[] };\n\nconst Navigation: React.FC<IProps> = ({ menuItems }) => {\n\treturn (\n\t\t<nav className='w-full fixed bottom-0 h-12 shadow-md border border-gray-100'>\n\t\t\t<div className='justify-between place-content-center flex flex-row h-full items-center px-12'>\n\t\t\t\t{menuItems.map((item, key) => (\n\t\t\t\t\t<Link to={item.link} key={key}>\n\t\t\t\t\t\t<div className='flex flex-col items-center'>\n\t\t\t\t\t\t\t<span>{item.icon}</span>\n\t\t\t\t\t\t\t<p className='uppercase tracking-widest'>{item.title}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Link>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</nav>\n\t);\n};\nexport default Navigation;\n","import React from 'react';\nimport { IVideoData } from '../../types/api/data';\n\ntype IProps = { data?: IVideoData };\n\nconst Video: React.FC<IProps> = ({ data }) => {\n\treturn (\n\t\t<>\n\t\t\t<div className='text-center bg-blue-500 h-full'>\n\t\t\t\t<p>ping {data?.ping}</p>\n\t\t\t</div>\n\t\t</>\n\t);\n};\nexport default Video;\n","import React, { useEffect, useState } from 'react';\nimport { HiAnnotation, HiHome, HiVideoCamera } from 'react-icons/hi';\nimport { IMenuItem } from './types/MenuItems';\nimport { IEncryptionData, IFramingData, IVideoData } from './types/api/data';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport CardList from './components/containers/CardList';\nimport Navigation from './components/navigation/Navigation';\nimport axios from 'axios';\nimport Video from './components/containers/Video';\n\nconst menuItems: IMenuItem[] = [\n\t{\n\t\tid: 0,\n\t\ttitle: 'nav1',\n\t\tlink: 'link',\n\t\ticon: <HiAnnotation />\n\t},\n\t{\n\t\tid: 1,\n\t\ttitle: 'Home',\n\t\tlink: '/',\n\t\ticon: <HiHome />\n\t},\n\t{\n\t\tid: 2,\n\t\ttitle: 'nav3',\n\t\tlink: 'link',\n\t\ticon: <HiVideoCamera />\n\t}\n];\n\nconst App: React.FC = () => {\n\tconst [videoData, setVideoData] = useState<IVideoData>();\n\tconst [framingData, setFramingData] = useState<IFramingData>();\n\tconst [encryptionData, setEncryptionData] = useState<IEncryptionData>();\n\n\tuseEffect(() => {\n\t\taxios.get('http://localhost:4000/video').then((res) => setVideoData(res.data));\n\t\taxios.get('http://localhost:4000/framing').then((res) => setFramingData(res.data));\n\t\taxios.get('http://localhost:4000/encryption').then((res) => setEncryptionData(res.data));\n\t}, []);\n\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route path='/video'>\n\t\t\t\t\t<Video data={videoData} />\n\t\t\t\t</Route>\n\n\t\t\t\t<Route path='/framing'>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>Framing data</h2>\n\t\t\t\t\t</div>\n\t\t\t\t</Route>\n\n\t\t\t\t<Route path='/encryption'>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>Encryption data</h2>\n\t\t\t\t\t</div>\n\t\t\t\t</Route>\n\n\t\t\t\t<Route path='/'>\n\t\t\t\t\t<CardList videoData={videoData} framingData={framingData} encryptionData={encryptionData} />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t\t<Navigation menuItems={menuItems} />\n\t\t</Router>\n\t);\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://cra.link/PWA');\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://cra.link/PWA.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister(): void {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n\tif (onPerfEntry) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.css';\nimport './styles/tailwind.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}